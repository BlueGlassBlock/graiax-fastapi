[project]
name = "graiax-fastapi"
version = "0.3.0"
description = "FastAPI for GraiaCommunity."
authors = [
    { name = "BlueGlassBlock", email = "blueglassblock@outlook.com" },
    { name = "Red_lnn", email = "w731347477@gmail.com" },
]
dependencies = [
    "graia-amnesia>=0.7.1,<0.8.0",
    "fastapi>=0.101.0",
    "graia-saya>=0.0.18",
    "typing-extensions>=4.7.1,<5.0",
]
requires-python = ">=3.8"
readme = "README.md"
license = { text = "MIT" }

[project.urls]
repository = "https://github.com/GraiaCommunity/graiax-fastapi"

[build-system]
requires = ["pdm-pep517>=1.0.0"]
build-backend = "pdm.pep517.api"

[tool]
[tool.pdm]
includes = ["src/graiax"]

[tool.pdm.scripts]
test = { composite = [
    "coverage run -m pytest -vv",
    "coverage xml",
    "coverage report",
] }

[tool.pdm.dev-dependencies]
dev = [
    "black>=23.7.0",
    "isort>=5.12.0",
    "launart>=0.6.4",
    "uvicorn[standard]>=0.23.2",
    "coverage>=7.2.7",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.1",
    "httpx>=0.24.1",
    "graia-broadcast>=0.23.1",
]

[tool.black]
line-length = 120
target-version = ["py38", "py39", "py310", "py311"]

[tool.ruff]
line-length = 120
target-version = "py38"
select = [
    # https://beta.ruff.rs/docs/rules
    "E",  # pycodestyle
    "F",  # pyflakes
    "UP", # pyupgrade
    "I",  # isort
    # "D",  # pydocstyle
    "ASYNC", # flake8-async
]
exclude = [".git", ".venv", "__pypackages__", "dist"]
ignore = ["F401"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.isort]
profile = "black"

[tool.pytest.ini_options]
asyncio_mode = "strict"
testpaths = ["./tests"]
python_files = ["test.py"]

[tool.coverage.run]
branch = true
source = ["."]
omit = ["tests/*", "test.py"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # standard pragma
    "pragma: no cover",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "if (typing\\.)?TYPE_CHECKING( is True)?:",
    "^ *\\.\\.\\.$",
    "pass",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    # Don't complain overload method / functions
    "@(typing\\.)?overload",
    # don't complain __repr__ and __str__ and __repr_args__ for representation
    "def __repr__\\(self\\).+",
    "except ImportError:",      # Don't complain about import fallback
]
partial_branches = ["pragma: worst case"]
precision = 2
fail_under = 100
